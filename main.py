import cv2
import os
import time
from datetime import datetime
from deepface import DeepFace
from scipy.spatial.distance import cosine
import pandas as pd
import smtplib
from email.message import EmailMessage

# ------------------------- CONFIG -------------------------
model_name = "Facenet"
threshold = 0.4
dataset_path =  r"D:\university stuff\4 SEMESTER\PROG FOR AI\Project\dataset"
output_path = r"D:\university stuff\4 SEMESTER\PROG FOR AI\Project\attendance"
temp_image_dir = "captures"
os.makedirs(output_path, exist_ok=True)
os.makedirs(temp_image_dir, exist_ok=True)

# ------------------------- Load Known Faces -------------------------
def build_dataset_embeddings(dataset_path):
    embeddings = {}
    for person in os.listdir(dataset_path):
        person_path = os.path.join(dataset_path, person)
        if not os.path.isdir(person_path):
            continue
        for img_file in os.listdir(person_path):
            img_path = os.path.join(person_path, img_file)
            try:
                embedding = DeepFace.represent(img_path=img_path, model_name=model_name)[0]["embedding"]
                embeddings[person] = embedding
                print(f"✅ Loaded embedding for: {person}")
                break  # Use only one image per person
            except Exception as e:
                print(f"❌ Error loading {img_path}: {e}")
    return embeddings

# ------------------------- Recognize One Face -------------------------
def recognize_face(face_img, known_embeddings):
    try:
        result = DeepFace.represent(img_path=face_img, model_name=model_name)[0]
        captured_embedding = result["embedding"]
    except Exception as e:
        print(f"❌ Failed to generate embedding for captured face: {e}")
        return "Unknown"

    min_dist = float("inf")
    identity = "Unknown"
    for name, ref_embedding in known_embeddings.items():
        dist = cosine(captured_embedding, ref_embedding)
        if dist < threshold and dist < min_dist:
            min_dist = dist
            identity = name
    return identity

# ------------------------- Capture & Detect -------------------------
def capture_and_detect(cam, known_embeddings, capture_num):
    ret, frame = cam.read()
    if not ret:
        print("❌ Failed to capture frame.")
        return []

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_detector.detectMultiScale(gray, 1.3, 5)
    detected_names = []

    if len(faces) == 0:
        print("😕 No faces detected in this frame.")
        return []

    for i, (x, y, w, h) in enumerate(faces):
        face_crop = frame[y:y+h, x:x+w]
        temp_path = os.path.join(temp_image_dir, f"capture_{capture_num}face{i}.jpg")
        try:
            cv2.imwrite(temp_path, face_crop)
            print(f"📷 Saved face to {temp_path}")
            name = recognize_face(temp_path, known_embeddings)
            print(f"🧠 Recognized: {name}")
            if name != "Unknown":
                detected_names.append(name)
        except Exception as e:
            print(f"❌ Error saving or recognizing face: {e}")

    return detected_names

# ------------------------- Finalize Attendance -------------------------
def generate_final_attendance(all_detections, total_captures):
    all_students = set()
    for detection in all_detections:
        all_students.update(detection)

    attendance_result = {}
    for student in all_students:
        detections = [i for i, capture in enumerate(all_detections) if student in capture]
        count = len(detections)

        if count >= 6:
            status = "Present"
        elif 0 < count < 5:
            status = "Early Left"
        elif all(i >= 2 for i in detections):
            status = "Late Comer"
        else:
            status = "Unknown"

        attendance_result[student] = {
            "Detections": count,
            "Detected_Times": detections,
            "Status": status
        }

    return attendance_result


def send_email_with_csv(sender_email, receiver_email, app_password, file_path):
    msg = EmailMessage()
    msg['Subject'] = '📄 Attendance Report'
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg.set_content('Attached is the attendance sheet generated by your Face Recognition Attendance System.')

    try:
        with open(file_path, 'rb') as f:
            file_data = f.read()
            file_name = os.path.basename(file_path)
            msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_name)

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(sender_email, app_password)
            smtp.send_message(msg)
        print("✅ Email sent successfully!")
    except Exception as e:
        print("❌ Error sending email:", e)


# ------------------------- Main Simulation -------------------------
print("🔄 Building known face embeddings...")
known_embeddings = build_dataset_embeddings(dataset_path)
print("✅ Embeddings loaded.\n")

face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
cam = cv2.VideoCapture(0)

print("📸 Starting simulated class monitoring (10 captures, 10 sec apart)...\n")
total_captures = 10
capture_interval = 3  # seconds

all_detections = []

for i in range(total_captures):
    print(f"\n📷 Capture {i+1}/{total_captures}")
    names = capture_and_detect(cam, known_embeddings, i)
    print(f"👥 Detected in Capture {i+1}: {names}")
    all_detections.append(names)
    time.sleep(capture_interval)

cam.release()
cv2.destroyAllWindows()


sender_email = "huzafa117@gmail.com"
receiver_email = "bsaicust@gmail.com"
app_password = "yorpqpbzindhjqwu"  # no spaces
file_path = csv_path  # already set earlier in your script

send_email_with_csv(sender_email, receiver_email, app_password, file_path)

print("✅ Script execution completed.")
# ------------------------- Final Attendance Report + Summary -------------------------
try:
    attendance_result = generate_final_attendance(all_detections, total_captures)
    today = datetime.now().strftime("%Y-%m-%d_%H-%M")
    csv_path = os.path.join(output_path, f"attendance_{today}.csv")

    # Get all registered students (based on folders in dataset)
    registered_students = [name for name in os.listdir(dataset_path) if os.path.isdir(os.path.join(dataset_path, name))]

    # Categorize students
    present_students = [name for name, data in attendance_result.items() if data["Status"] == "Present"]
    early_lefters = [name for name, data in attendance_result.items() if data["Status"] == "Early Left"]
    late_comers = [name for name, data in attendance_result.items() if data["Status"] == "Late Comer"]
    detected_students = set(attendance_result.keys())
    absent_students = list(set(registered_students) - detected_students)

    # Create DataFrame
    attendance_df = pd.DataFrame([
        {"Name": name, "Detections": data["Detections"], "Status": data["Status"]}
        for name, data in attendance_result.items()
    ])

    # Add absent students
    for name in absent_students:
        attendance_df = pd.concat([
            attendance_df,
            pd.DataFrame([{"Name": name, "Detections": 0, "Status": "Absent"}])
        ], ignore_index=True)

    # Save CSV
    attendance_df.to_csv(csv_path, index=False)

    # Append Summary at bottom of CSV
    with open(csv_path, 'a') as f:
        f.write("\n\nAttendance Summary\n")
        f.write(f"Total Registered, {len(registered_students)}\n")
        f.write(f"Present, {len(present_students)}\n")
        f.write(f"Early Left, {len(early_lefters)}\n")
        f.write(f"Late Comer, {len(late_comers)}\n")
        f.write(f"Absent, {len(absent_students)}\n")

    # Print Summary in terminal
    print(f"\n✅ Final attendance saved to: {os.path.abspath(csv_path)}\n")
    print("📊 Attendance Summary:")
    print(f"👥 Total Registered Students: {len(registered_students)}")
    print(f"✅ Present: {len(present_students)}")
    print(f"🚪 Early Left: {len(early_lefters)}")
    print(f"🕒 Late Comer: {len(late_comers)}")
    print(f"❌ Absent: {len(absent_students)}")

    # Send Email AFTER CSV is saved
    sender_email = "huzafa117@gmail.com"
    receiver_email = "bsaicust@gmail.com"
    app_password = "yorpqpbzindhjqwu"  # no spaces
   # file_path = r"D:\university stuff\4 SEMESTER\PROG FOR AI\Project\attendance"
    send_email_with_csv(sender_email, receiver_email, app_password, file_path)
    print("✅ Script execution completed.")

except Exception as e:
    print("❌ Error during final attendance generation:", e)
write me for it also
